"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var path_1 = __importDefault(require("path"));
var PathHost = /** @class */ (function () {
    function PathHost(_a) {
        var baseUrl = _a.baseUrl, paths = _a.paths;
        this.baseUrl = baseUrl;
        this.paths = paths;
        this.aliasMapPaths = this.transformConfigPaths(baseUrl, paths);
    }
    PathHost.prototype.replaceStart = function (str, replaceStr, replaceValue) {
        if (str.indexOf(replaceStr) !== 0)
            return str;
        return replaceValue + str.slice(replaceStr.length);
    };
    PathHost.prototype.clearAllMatchMark = function (str) {
        return str.replace('*', '');
    };
    PathHost.prototype.minimatch = function (origin, target) {
        target = this.clearAllMatchMark(target);
        return origin.indexOf(target) === 0;
    };
    PathHost.prototype.normalizeSeparator = function (filePath) {
        var sysSeparator = path_1["default"].sep;
        var filePathSeparator = '/';
        if (sysSeparator === filePathSeparator)
            return filePath;
        while (true) {
            if (!filePath.includes(sysSeparator)) {
                break;
            }
            filePath = filePath.replace(sysSeparator, filePathSeparator);
        }
        return filePath;
    };
    PathHost.prototype.aliasToAbsolute = function (modulePath) {
        var _this = this;
        var match = {};
        Object.keys(this.aliasMapPaths).forEach(function (valuePath) {
            if (match.value)
                return;
            var matched = _this.minimatch(modulePath, valuePath);
            match.value = matched && _this.clearAllMatchMark(valuePath);
            if (match.value) {
                match.mapPath = _this.clearAllMatchMark(_this.aliasMapPaths[valuePath][0]);
            }
        });
        if (match.value) {
            return path_1["default"].join(match.mapPath, this.replaceStart(modulePath, match.value, ''));
        }
        return modulePath;
    };
    PathHost.prototype.transformConfigPaths = function (baseUrl, paths) {
        var absolutePaths = {};
        Object.keys(paths).forEach(function (aliasName) {
            var relatePathValue = [];
            paths[aliasName].forEach(function (relatePath) {
                relatePathValue.push(path_1["default"].join(baseUrl, relatePath));
            });
            absolutePaths[aliasName] = relatePathValue;
        });
        return absolutePaths;
    };
    /**
     * change module path for file external module
     * @param {*} sourceText file source text
     * @param {*} aliasPath alias module path
     * @param {*} outputType the type of output external module path, for example: 'relative' | 'absolute'
     */
    PathHost.prototype.changeModulePath = function (fileName, aliasPath, outputType) {
        var absolutePath = this.aliasToAbsolute(aliasPath);
        if (!path_1["default"].isAbsolute(absolutePath)) {
            return aliasPath;
        }
        var replacePath;
        if (outputType === 'absolute') {
            replacePath = absolutePath;
        }
        else if (outputType === 'relative') {
            replacePath = this.getRelativeBetween2AbsolutePath(fileName, absolutePath);
        }
        return replacePath;
    };
    PathHost.prototype.getRelativeBetween2AbsolutePath = function (fileName, importPath) {
        // console.log('getRelativeBetween2AbsolutePath', fileName, importPath);
        var currDir = path_1["default"].dirname(fileName);
        // console.log('currdir', currDir, importPath);
        var strHeap = currDir.split('');
        // computed between fileName and importPath common dir prefix
        var end = 0;
        for (var i = 0; i < strHeap.length; i++) {
            if (importPath[i] === strHeap[i]) {
                end = i;
            }
            else {
                break;
            }
        }
        // The path separator of window system is\, need according to different systems to split
        // Mac os is /, window is \
        var sysSeparator = path_1["default"].sep;
        var oldMatchDir = currDir.slice(0, end + 1);
        var realMatchDir = oldMatchDir.split(sysSeparator).slice(0, -1).join(sysSeparator) + sysSeparator;
        // console.log('matchdir', oldMatchDir, realMatchDir, currDir)
        if (end === currDir.length - 1) {
            // The path to be imported is in the current directory
            return this.normalizeSeparator(this.replaceStart(importPath, currDir, '.'));
        }
        else {
            // The path to be imported is out the current directory
            var replacedMatchPart = this.replaceStart(fileName, realMatchDir, '');
            // If go out, real layers show be reduced 1
            var goOutLayers = replacedMatchPart.split(sysSeparator).length - 1;
            var layersStr = '';
            for (var i = 0; i < goOutLayers; i++) {
                layersStr += '../';
            }
            // clear tail separator
            return layersStr + this.normalizeSeparator(this.replaceStart(importPath, realMatchDir, ''));
        }
    };
    return PathHost;
}());
exports["default"] = PathHost;
